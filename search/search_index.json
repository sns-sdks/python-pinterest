{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Python-Pinterest\u2019s documentation! A Python wrapper around for Pinterest API V5 . Introduction Pinterest API (v5) is now in beta. This library provides a Python interface for this version API. Library work on Python 3.6+, and support for sync , async . Tips This library only have apis for v5, not contains older api.","title":"Introduction"},{"location":"#welcome-to-python-pinterests-documentation","text":"A Python wrapper around for Pinterest API V5 .","title":"Welcome to Python-Pinterest\u2019s documentation!"},{"location":"#introduction","text":"Pinterest API (v5) is now in beta. This library provides a Python interface for this version API. Library work on Python 3.6+, and support for sync , async . Tips This library only have apis for v5, not contains older api.","title":"Introduction"},{"location":"CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. Version 0.1.0 (2022-03-07) Base implement for api. Version 0.2.0 (2022-03-13) Add api for catalogs. More docs on https://sns-sdks.lkhardy.cn/python-pinterest/","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file.","title":"Changelog"},{"location":"CHANGELOG/#version-010-2022-03-07","text":"Base implement for api.","title":"Version 0.1.0 (2022-03-07)"},{"location":"CHANGELOG/#version-020-2022-03-13","text":"Add api for catalogs. More docs on https://sns-sdks.lkhardy.cn/python-pinterest/","title":"Version 0.2.0 (2022-03-13)"},{"location":"authorization/","text":"Authentication All Pinterest API endpoints are designed to work in the context of a single operating user. We identify this user based on the access token you pass with each request. To generate a user access token, you must first request access to act on the user\u2019s behalf through a flow based on the OAuth 2.0 authorization framework. Once you have a valid token you must include the header Authorization: Bearer {token} to make a successful request. Prerequisite At the beginning, You need a Pinterest app, and be reviewed. Register your app and get your app id and app secret key You can create an app by the following steps. Log into www.pinterest.com with the account that you\u2019ll use to manage your apps Go to My Apps Select Connect app and complete our request form with your app information. Submit your request for our team to review (review our Developer Guidelines to understand what we do and don\u2019t support with our API) You will receive an email letting you know the status of your request once we have completed the review Return to My Apps to see your app id and secret key. Configure the redirect URI required by this code. When you give user to do authorization, The pinterest will redirect a URL which provided by you server. And you can set up it by the following steps. Click on the name of your app at https://developers.pinterest.com/apps/ . Go to the \u201cConfigure\u201d section inside your application, and in the box labeled \"Redirect URIs,\" enter the desired URI. Save your entries. If desired, you may run the sample environment set-up script and verify the results, as described in the Pinterest API QuickStart Github Repo . OAuth flow Now you can follow our step to authorization. Tip Use IPython or Python 3.8+ with python -m asyncio to try this code interactively, as they support executing async / await expressions in the console. Initial The API You need App ID and App Secret to initial Api instance. from pinterest import Api p = Api ( app_id = \"You app ID\" , app_secret = \"Your app secret\" ) Async mode from pinterest import AsyncApi ap = AsyncApi ( app_id = \"You app ID\" , app_secret = \"Your app secret\" ) By default, The redirect uri is https://localhost/ , and scope is [\"user_accounts:read\", \"pins:read\", \"boards:read\"] . You need add this redirect uri to App's Authentication settings. Get authorization url Now you can get the url for user to do authenticate. And you can point the scope and redirect uri by the parameter redirect_uri , scope . p . get_authorization_url () # ('https://www.pinterest.com/oauth?response_type=code&client_id=xxx&redirect_uri=https%3A%2F%2Flocalhost%2F&scope=user_accounts%3Aread%2Cpins%3Aread%2Cboards%3Aread&state=un7tyObPV2zPS1PgfP8UuUKJfG66bp', 'un7tyObPV2zPS1PgfP8UuUKJfG66bp') Async mode ap . get_authorization_url () # ('https://www.pinterest.com/oauth?response_type=code&client_id=xxx&redirect_uri=https%3A%2F%2Flocalhost%2F&scope=user_accounts%3Aread%2Cpins%3Aread%2Cboards%3Aread&state=un7tyObPV2zPS1PgfP8UuUKJfG66bp', 'un7tyObPV2zPS1PgfP8UuUKJfG66bp') Generate access token Once you have the redirect response for your callback url, you can get the user access token. p . generate_access_token ( response = \"Your redirect response url\" ) # {\"access_token\": \"pina_xxx\", \"refresh_token\": \"pinr_xxx\", \"response_type\": \"authorization_code\", # \"token_type\": \"bearer\", \"expires_in\": 2592000, \"refresh_token_expires_in\": 31536000, \"scope\": \"user_accounts:read pins:read boards:read\"} Async mode await ap . generate_access_token ( response = \"Your redirect response url\" ) # {\"access_token\": \"pina_xxx\", \"refresh_token\": \"pinr_xxx\", \"response_type\": \"authorization_code\", # \"token_type\": \"bearer\", \"expires_in\": 2592000, \"refresh_token_expires_in\": 31536000, \"scope\": \"user_accounts:read pins:read boards:read\"} Now you can use acess_token to read your user accounts, pins and boards.","title":"Authorization"},{"location":"authorization/#authentication","text":"All Pinterest API endpoints are designed to work in the context of a single operating user. We identify this user based on the access token you pass with each request. To generate a user access token, you must first request access to act on the user\u2019s behalf through a flow based on the OAuth 2.0 authorization framework. Once you have a valid token you must include the header Authorization: Bearer {token} to make a successful request.","title":"Authentication"},{"location":"authorization/#prerequisite","text":"At the beginning, You need a Pinterest app, and be reviewed.","title":"Prerequisite"},{"location":"authorization/#register-your-app-and-get-your-app-id-and-app-secret-key","text":"You can create an app by the following steps. Log into www.pinterest.com with the account that you\u2019ll use to manage your apps Go to My Apps Select Connect app and complete our request form with your app information. Submit your request for our team to review (review our Developer Guidelines to understand what we do and don\u2019t support with our API) You will receive an email letting you know the status of your request once we have completed the review Return to My Apps to see your app id and secret key.","title":"Register your app and get your app id and app secret key"},{"location":"authorization/#configure-the-redirect-uri-required-by-this-code","text":"When you give user to do authorization, The pinterest will redirect a URL which provided by you server. And you can set up it by the following steps. Click on the name of your app at https://developers.pinterest.com/apps/ . Go to the \u201cConfigure\u201d section inside your application, and in the box labeled \"Redirect URIs,\" enter the desired URI. Save your entries. If desired, you may run the sample environment set-up script and verify the results, as described in the Pinterest API QuickStart Github Repo .","title":"Configure the redirect URI required by this code."},{"location":"authorization/#oauth-flow","text":"Now you can follow our step to authorization. Tip Use IPython or Python 3.8+ with python -m asyncio to try this code interactively, as they support executing async / await expressions in the console.","title":"OAuth flow"},{"location":"authorization/#initial-the-api","text":"You need App ID and App Secret to initial Api instance. from pinterest import Api p = Api ( app_id = \"You app ID\" , app_secret = \"Your app secret\" ) Async mode from pinterest import AsyncApi ap = AsyncApi ( app_id = \"You app ID\" , app_secret = \"Your app secret\" ) By default, The redirect uri is https://localhost/ , and scope is [\"user_accounts:read\", \"pins:read\", \"boards:read\"] . You need add this redirect uri to App's Authentication settings.","title":"Initial The API"},{"location":"authorization/#get-authorization-url","text":"Now you can get the url for user to do authenticate. And you can point the scope and redirect uri by the parameter redirect_uri , scope . p . get_authorization_url () # ('https://www.pinterest.com/oauth?response_type=code&client_id=xxx&redirect_uri=https%3A%2F%2Flocalhost%2F&scope=user_accounts%3Aread%2Cpins%3Aread%2Cboards%3Aread&state=un7tyObPV2zPS1PgfP8UuUKJfG66bp', 'un7tyObPV2zPS1PgfP8UuUKJfG66bp') Async mode ap . get_authorization_url () # ('https://www.pinterest.com/oauth?response_type=code&client_id=xxx&redirect_uri=https%3A%2F%2Flocalhost%2F&scope=user_accounts%3Aread%2Cpins%3Aread%2Cboards%3Aread&state=un7tyObPV2zPS1PgfP8UuUKJfG66bp', 'un7tyObPV2zPS1PgfP8UuUKJfG66bp')","title":"Get authorization url"},{"location":"authorization/#generate-access-token","text":"Once you have the redirect response for your callback url, you can get the user access token. p . generate_access_token ( response = \"Your redirect response url\" ) # {\"access_token\": \"pina_xxx\", \"refresh_token\": \"pinr_xxx\", \"response_type\": \"authorization_code\", # \"token_type\": \"bearer\", \"expires_in\": 2592000, \"refresh_token_expires_in\": 31536000, \"scope\": \"user_accounts:read pins:read boards:read\"} Async mode await ap . generate_access_token ( response = \"Your redirect response url\" ) # {\"access_token\": \"pina_xxx\", \"refresh_token\": \"pinr_xxx\", \"response_type\": \"authorization_code\", # \"token_type\": \"bearer\", \"expires_in\": 2592000, \"refresh_token_expires_in\": 31536000, \"scope\": \"user_accounts:read pins:read boards:read\"} Now you can use acess_token to read your user accounts, pins and boards.","title":"Generate access token"},{"location":"installation/","text":"Dependencies These distributions will be installed automatically when installing python-pinterest. HTTPX is a next generation HTTP client for Python. We use it to send request. Authlib is ultimate Python library in building OAuth and OpenID Connect servers. JWS, JWK, JWA, JWT are included. Installation From Pypi $ pip install python-pinterest From source use Poetry $ git clone https://github.com/sns-sdks/python-pinterest $ cd python-pinterest $ make env $ poetry build make env Testing Test the code, Run: make test See the coverage information: make cov-term","title":"Installation"},{"location":"installation/#dependencies","text":"These distributions will be installed automatically when installing python-pinterest. HTTPX is a next generation HTTP client for Python. We use it to send request. Authlib is ultimate Python library in building OAuth and OpenID Connect servers. JWS, JWK, JWA, JWT are included.","title":"Dependencies"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#from-pypi","text":"$ pip install python-pinterest","title":"From Pypi"},{"location":"installation/#from-source","text":"use Poetry $ git clone https://github.com/sns-sdks/python-pinterest $ cd python-pinterest $ make env $ poetry build make env","title":"From source"},{"location":"installation/#testing","text":"Test the code, Run: make test See the coverage information: make cov-term","title":"Testing"},{"location":"usage/","text":"Usage Once you have access token with permissions. Let us do something for the data. Initial API by access token from pinterest import Api p = Api ( access_token = \"Your access token\" ) Async mode from pinterest import AsyncApi ap = AsyncApi ( access_token = \"Your access token\" ) User Accounts p . user_account . get () # UserAccount(username='merleliukun', account_type='BUSINESS') Async mode await ap . user_account . get () # UserAccount(username='merleliukun', account_type='BUSINESS') boards # list my boards p . boards . list () # BoardsResponse(items=[Board(id='1022106146619699845', name='City'), Board(id='1022106146619703648', name='Food')], bookmark=None) # list my board's pins p . boards . list_pins ( board_id = \"1022106146619699845\" ) # PinsResponse(items=[Pin(id='1022106077902810180', created_at='2022-02-14T02:54:38'), Pin(id='1022106077902781601', created_at='2022-02-13T11:29:51'), Pin(id='1022106077902781616', created_at='2022-02-13T11:31:07'), Pin(id='1022106077902203823', created_at='2021-12-29T02:24:55')], bookmark=None) Async mode # list my boards await ap . boards . list () # BoardsResponse(items=[Board(id='1022106146619699845', name='City'), Board(id='1022106146619703648', name='Food')], bookmark=None) # list my board's pins await ap . boards . list_pins ( board_id = \"1022106146619699845\" ) # PinsResponse(items=[Pin(id='1022106077902810180', created_at='2022-02-14T02:54:38'), Pin(id='1022106077902781601', created_at='2022-02-13T11:29:51'), Pin(id='1022106077902781616', created_at='2022-02-13T11:31:07'), Pin(id='1022106077902203823', created_at='2021-12-29T02:24:55')], bookmark=None) pins # Get pin data p . pins . get ( pin_id = \"1022106077902810180\" ) # Pin(id='1022106077902810180', created_at='2022-02-14T02:54:38') # Get pin analytics p . pins . get_analytics ( pin_id = \"1022106077902810180\" , start_date = \"2022-02-10\" , end_date = \"2022-02-11\" , metric_types = \"IMPRESSION\" ) # Analytics(all=AnalyticsAll(daily_metrics=[DailyMetric(date='2022-02-10'), DailyMetric(date='2022-02-11')])) Async mode # Get pin data await ap . pins . get ( pin_id = \"1022106077902810180\" ) # Pin(id='1022106077902810180', created_at='2022-02-14T02:54:38') # Get pin analytics await ap . pins . get_analytics ( pin_id = \"1022106077902810180\" , start_date = \"2022-02-10\" , end_date = \"2022-02-11\" , metric_types = \"IMPRESSION\" ) # Analytics(all=AnalyticsAll(daily_metrics=[DailyMetric(date='2022-02-10'), DailyMetric(date='2022-02-11')])) And other apis are same as above.","title":"Usage"},{"location":"usage/#usage","text":"Once you have access token with permissions. Let us do something for the data.","title":"Usage"},{"location":"usage/#initial-api-by-access-token","text":"from pinterest import Api p = Api ( access_token = \"Your access token\" ) Async mode from pinterest import AsyncApi ap = AsyncApi ( access_token = \"Your access token\" )","title":"Initial API by access token"},{"location":"usage/#user-accounts","text":"p . user_account . get () # UserAccount(username='merleliukun', account_type='BUSINESS') Async mode await ap . user_account . get () # UserAccount(username='merleliukun', account_type='BUSINESS')","title":"User Accounts"},{"location":"usage/#boards","text":"# list my boards p . boards . list () # BoardsResponse(items=[Board(id='1022106146619699845', name='City'), Board(id='1022106146619703648', name='Food')], bookmark=None) # list my board's pins p . boards . list_pins ( board_id = \"1022106146619699845\" ) # PinsResponse(items=[Pin(id='1022106077902810180', created_at='2022-02-14T02:54:38'), Pin(id='1022106077902781601', created_at='2022-02-13T11:29:51'), Pin(id='1022106077902781616', created_at='2022-02-13T11:31:07'), Pin(id='1022106077902203823', created_at='2021-12-29T02:24:55')], bookmark=None) Async mode # list my boards await ap . boards . list () # BoardsResponse(items=[Board(id='1022106146619699845', name='City'), Board(id='1022106146619703648', name='Food')], bookmark=None) # list my board's pins await ap . boards . list_pins ( board_id = \"1022106146619699845\" ) # PinsResponse(items=[Pin(id='1022106077902810180', created_at='2022-02-14T02:54:38'), Pin(id='1022106077902781601', created_at='2022-02-13T11:29:51'), Pin(id='1022106077902781616', created_at='2022-02-13T11:31:07'), Pin(id='1022106077902203823', created_at='2021-12-29T02:24:55')], bookmark=None)","title":"boards"},{"location":"usage/#pins","text":"# Get pin data p . pins . get ( pin_id = \"1022106077902810180\" ) # Pin(id='1022106077902810180', created_at='2022-02-14T02:54:38') # Get pin analytics p . pins . get_analytics ( pin_id = \"1022106077902810180\" , start_date = \"2022-02-10\" , end_date = \"2022-02-11\" , metric_types = \"IMPRESSION\" ) # Analytics(all=AnalyticsAll(daily_metrics=[DailyMetric(date='2022-02-10'), DailyMetric(date='2022-02-11')])) Async mode # Get pin data await ap . pins . get ( pin_id = \"1022106077902810180\" ) # Pin(id='1022106077902810180', created_at='2022-02-14T02:54:38') # Get pin analytics await ap . pins . get_analytics ( pin_id = \"1022106077902810180\" , start_date = \"2022-02-10\" , end_date = \"2022-02-11\" , metric_types = \"IMPRESSION\" ) # Analytics(all=AnalyticsAll(daily_metrics=[DailyMetric(date='2022-02-10'), DailyMetric(date='2022-02-11')])) And other apis are same as above.","title":"pins"}]}